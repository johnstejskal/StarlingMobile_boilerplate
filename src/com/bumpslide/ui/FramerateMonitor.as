/** * This code is part of the Bumpslide Library by David Knape * http://bumpslide.com/ *  * Copyright (c) 2006, 2007, 2008 by Bumpslide, Inc. *  * Released under the open-source MIT license. * http://www.opensource.org/licenses/mit-license.php * see LICENSE.txt for full license terms */  package com.bumpslide.ui {	import flash.display.Sprite;	import flash.events.Event;	import flash.system.System;	import flash.text.AntiAliasType;	import flash.text.GridFitType;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.*;	/**     * FPS and Memory Monitor     *      * @author David Knape     */    public class FramerateMonitor extends Sprite {    	        	static public const ALIGN_RIGHT:String = "right";		static public const ALIGN_LEFT:String = "left";			    	public var fpsField:TextField;    	public var memField:TextField;    			private var fpsCount:int = 0;		private var avgCount:int = 30;				private var previousTime:uint;  		private var alignment:String = "right";						// update fps every X frames		private static const UPDATE_FRAMES:int = 10; 		       	public function FramerateMonitor( textColor:Number=0xeeeeee, backgroundColor:Number=0x000000, backgroundAlpha:Number=.5, align:String="right")        	{       		       		alignment = align;       		       		// draw background       		var bg:Sprite = new Sprite();       		//bg.graphics.lineStyle( 1, textColor, backgroundAlpha );       		bg.graphics.beginFill(backgroundColor, backgroundAlpha );       		bg.graphics.drawRect( 0, 0, 52, 26);       		bg.graphics.endFill();       		bg.x = bg.y = 1;       		       		       		       		// draw text fields       		fpsField = createTextField(2,1,50,15);   		       		memField = createTextField(2,12,50,15);   		       		      		       		// add to stage       		addChild( bg );       		addChild( fpsField );       		addChild( memField );       		       		// format text fields       		var tf:TextFormat = new TextFormat('Verdana', 9, textColor );       		fpsField.defaultTextFormat = tf;       		memField.defaultTextFormat = tf;       		       		       		// update on enterframe       		addEventListener(Event.ADDED_TO_STAGE, onAddedToStage );       		        }                private function onAddedToStage(e:Event) : void {           	stage.addEventListener( Event.RESIZE, onStageResize );                	addEventListener( Event.ENTER_FRAME, update );        	onStageResize();        }                private function onStageResize(e:Event=null) : void {        	switch( alignment ) {	        		case ALIGN_RIGHT:        			x = (stage.stageWidth-width) - 4;        			break;        		default:        			// don't mess with x's        			break;        	}        	        }        private function update(e:Event) : void {			var time:uint = getTimer();			fpsCount += time-previousTime;			if (avgCount < 1){				fpsField.text = String(Math.round(1000/(fpsCount/UPDATE_FRAMES))+" FPS");				avgCount = UPDATE_FRAMES;				fpsCount = 0;			}			avgCount--;			previousTime = time;						memField.text = Math.round(System.totalMemory/(1024*1024)) + " MB";		}    				private function createTextField(x:Number, y:Number, width:Number, height:Number ) : TextField {			var tf:TextField = new TextField();       		tf.width = width;       		tf.height = height;       		tf.x = x;       		tf.y = y;        		tf.selectable = false;       		tf.antiAliasType = AntiAliasType.ADVANCED;       		tf.gridFitType = GridFitType.PIXEL;          		return tf;		}    }}