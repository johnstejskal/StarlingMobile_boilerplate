/** * This code is part of the Bumpslide Library by David Knape * http://bumpslide.com/ *  * Copyright (c) 2006, 2007, 2008 by Bumpslide, Inc. *  * Released under the open-source MIT license. * http://www.opensource.org/licenses/mit-license.php * see LICENSE.txt for full license terms */ package com.bumpslide.ui {	import com.bumpslide.events.UIEvent;	import com.bumpslide.util.Delegate;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.geom.ColorTransform;	import flash.utils.getQualifiedClassName;		/**     * Base Class for MovieClips that just want access to the shortcut methods provided here.     *      * If your class is a component that needs a validation model for data and sizing,      * you should extend Component instead.     *      * @author David Knape     */    public class BaseClip extends MovieClip {    			public var debugEnabled:Boolean = false;				function BaseClip() {    		init();    	}	
				/**		 * Displays object as "[Classname:instanceName]"		 */		override public function toString():String {			var classname:String = getQualifiedClassName(this).split('::').pop();						return "["+classname+":"+name+"]";
		}				/**		 * Initialize		 */
		protected function init() : void {    		    	}    	    	/**    	 * Destroy    	 */    	public function destroy() : void {    	    	}    							/**		 * Dispatches a UIEvent which is a bubbling event with a data holder		 */		protected function sendEvent( type:String, data:Object=null ) : void {			UIEvent.send( this, type, data );		}						/**		 * Delegate that swallows input (like an event or some callback info) and calls your delegate		 * 		 * This is seful for cases where an event should trigger an existing function.		 * 		 * Example:		 *   my_btn.addEventListener( MouseEvent.CLICK, Link.to, "http://yahoo.com/" );		 * 		 */		protected function eventDelegate( func:Function, ...args ) : Function {			var delegate:Function = Delegate.create.apply( null, [func].concat(args) );			return function (...rest) : void { delegate.call(); };		}			/**		 * Safely remove child (no errors) and call its destroy method if it has one		 */		public function destroyChild( child:DisplayObject ):void {			if(child!=null) {				if (child is BaseClip) {				 	(child as BaseClip).destroy();				}				if (child.parent!=null) {					child.parent.removeChild(child);				}			}		}				/**		 * changes the color of a movieclip		 */		protected function colorize( mc:DisplayObject, color:uint ) : void {			var current_alpha:Number = mc.alpha;			if(isNaN(color)) {				mc.transform.colorTransform = null;			} else {				var ct:ColorTransform = new ColorTransform();				ct.color = color;				mc.transform.colorTransform = ct;			}			mc.alpha = current_alpha;		}				/**		 * Trace		 */		protected function debug( s:* ) : void {			if(debugEnabled) trace( this + ' ' + s );		}				//-------------------------------		// shortcuts to Delegate methods		//--------------------------------		   		protected var d:Function = Delegate.create; 	    	protected var delegate:Function = Delegate.create;    	protected var callLater:Function = Delegate.callLater;		protected var cancelCall:Function = Delegate.cancel;				    	    	    }}