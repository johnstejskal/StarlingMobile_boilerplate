/** * This code is part of the Bumpslide Library by David Knape * http://bumpslide.com/ *  * Copyright (c) 2006, 2007, 2008 by Bumpslide, Inc. *  * Released under the open-source MIT license. * http://www.opensource.org/licenses/mit-license.php * see LICENSE.txt for full license terms */ package com.bumpslide.ui.behavior {	import flash.events.Event;	
	import flash.display.InteractiveObject;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Dictionary;	import flash.utils.Timer;		import com.bumpslide.events.UIEvent;			/**	 * Repeater Button Behavior	 * 	 * You can use this class to add press-and-hold functionality for things	 * like scroll buttons.	 * 	 * Once the behavior is initialized, you can add an event listener on your	 * button or a parent for the Event of type RepeaterButtonBehavior.EVENT_FIRE.	 * The event target is the button just as with a normal mouse click event.	 * 	 * 	 * The initial delay before firing and the delay between firings can be set using	 * the initialDelay and loopDelay params in the constructor or static init methods.	 * 	 * Example:	 * @code {	 * 	 *   // inside some component class...	 *    	 *   // some buttons 	 *   public var scroll_up_btn:MovieClip;	 *   public var scroll_down_btn:MovieClip;	 *   	 *   function initScrollButton():void {	 *     RepeaterButtonBehavior.init( scroll_up_btn );	 *     RepeaterButtonBehavior.init( scroll_down_btn );	 * 	   addEventListener( RepeaterButtonBehavior.EVENT_FIRE, scroll );	 * 	   addEventListener( MouseEvent.CLICK, scroll );	 * 	   	 *   } 	 *   	 *   function scroll( e:Event ) : void {	 *   	switch(e.target) {	 *   	  case scroll_up_btn: scrollUp(); break;	 *   	  case scroll_down_btn: scrollDown(); break;	 *   	}	 *   }	 * }	 *   	 * @author David Knape	 */	public class RepeaterButtonBehavior extends EventDispatcher {				// our rapid fire event				[Event(name='onRepeaterButtonFire',type='com.bumpslide.events.UIEvent')]		public static const EVENT_FIRE:String = "onRepeaterButtonFire";				private var _fired:Boolean;							/**		 * Attaches repeater behavior to a button		 */		static public function init( target:InteractiveObject, loopDelay:int=100, initialDelay:int=50 ) : void {			new RepeaterButtonBehavior( target, loopDelay, initialDelay );			}				/**		 * Removes repeater behavior from a button		 */		static public function destroy(target:InteractiveObject) : void {			if(_buttons[target]!=null) (_buttons[target] as RepeaterButtonBehavior).remove();		}								/**		 * Creates a new repeater button		 */		function RepeaterButtonBehavior(target:InteractiveObject, loopDelay:int=100, initialDelay:int=50 ) {			_target = target;						// kill existing behavior if found to avoid duplicate listeners			RepeaterButtonBehavior.destroy( target );						// add mouse event listeners to target			_target.addEventListener( MouseEvent.MOUSE_DOWN, onMouseDown, false, 0, true);				_target.addEventListener( MouseEvent.MOUSE_UP, onMouseUp, false, 0, true);				_target.addEventListener( MouseEvent.MOUSE_OUT, reset, false, 0, true);										// create timers			_delayTimer = new Timer( initialDelay, 1 );			_delayTimer.addEventListener( TimerEvent.TIMER_COMPLETE, startFiring );						_loopTimer = new Timer(loopDelay, 0);			_loopTimer.addEventListener( TimerEvent.TIMER, fire );						if(_buttons[target]!=null) (_buttons[target] as RepeaterButtonBehavior).remove();			_buttons[target] = this;								}				/**		 * removes event listeners, thus removing behavior		 */		public function remove() : void {			_target.removeEventListener( MouseEvent.MOUSE_DOWN, onMouseDown);				_target.removeEventListener( MouseEvent.MOUSE_UP, onMouseUp );				_target.removeEventListener( MouseEvent.MOUSE_OUT, reset);						delete _buttons[target];		}				/**		 * the button to which this behavior has been applied		 */				public function get target () : InteractiveObject {			return _target;		}
		
		
		//------------------		// PRIVATE		//------------------		protected function onMouseDown(e:MouseEvent):void {			log('onMouseDown');			e.stopPropagation();			reset();			_delayTimer.start();					}				protected function onMouseUp(e:MouseEvent):void {			if(!_fired) fire();			reset();		}				protected function startFiring(e:TimerEvent=null):void {			reset();			if(_target.mouseEnabled) {				log('startFiring');					_loopTimer.start();			}		}		protected function reset(e:MouseEvent=null):void {			log('reset');			_fired = false;			_delayTimer.reset();			_loopTimer.reset();		}				protected function fire(e:Event=null) : void {			_fired = true;			if(_target.mouseEnabled) {				log('fire');				//_target.dispatchEvent(fakeClickEvent);				UIEvent.send(_target, EVENT_FIRE);			}		}				protected function log(s:String):void{			//trace('RepeatButton - ' + s );		}				protected var _target:InteractiveObject;		protected var _loopTimer:Timer;				protected var _delayTimer:Timer;		protected var _enabled:Boolean;						// track instances locally to aid in event management		static private var _buttons:Dictionary = new Dictionary(true);			}}