/** * This code is part of the Bumpslide Library by David Knape * http://bumpslide.com/ *  * Copyright (c) 2006, 2007, 2008, 2009 by Bumpslide, Inc. *  * Released under the open-source MIT license. * http://www.opensource.org/licenses/mit-license.php * see LICENSE.txt for full license terms */ package com.bumpslide.preloader {	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.utils.Timer;		/**     * This is the document class for the preloader wrapper swf.     *      * To use, embed your swf as preloader.swf?swf=mainfile.swf     *      * url options:     *      * swf (default 'main.swf')            *     main swf file to load (default: "main.swf")     *          * noCache (default false)     *     if 'true' or '1', random string will be appended to swf url      *     to prevent caching     *          * waitForStartup (default false)     *     if 'true' or '1' will cause preloader to pause at 100%      *     and wait for PreloadEvent.STARTUP_COMPLETE.     *       * @author David Knape     */    public class PreloaderApp extends MovieClip {    	    	public var progressbar_mc:ProgressBar;    	    	protected var loader:Loader;    	    	// these values can be override with flashvars (or URL params)    	// or, you can set them in a subclass constructor    	protected var swf:String = "main.swf";    	protected var waitForStartup:Boolean = false;    	protected var noCache:Boolean = false;    	        public function PreloaderApp() {        	        	// parse params from flashvars        	        	if(loaderInfo.parameters['swf']!=null) swf = loaderInfo.parameters['swf'];        	        	// check to see if the boolean vars are true to allow override in subclass        	if(noCache || getBoolean('noCache')) swf+="?"+Math.random();        	if(waitForStartup || getBoolean('waitForStartup')) waitForStartup = true;        	        	// setup loader        	loader = new Loader(); 	        	loader.contentLoaderInfo.addEventListener( Event.INIT, handleSwfInit );            loader.contentLoaderInfo.addEventListener( ProgressEvent.PROGRESS, handleLoaderProgress );                       // add preload event listeners for communication from main swf            addEventListener( PreloadEvent.STARTUP_COMPLETE, handleStartupComplete );            addEventListener( PreloadEvent.MESSAGE, handlePreloadMessage);                       	// wait for stage            addEventListener(Event.ADDED_TO_STAGE, initStage);                        // load...            loader.load( new URLRequest( swf));		}						/**		 * listen for stage resize events		 */		protected function initStage(event:Event):void {			 // stage resize stuff			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;				stage.addEventListener(Event.RESIZE, onStageResize);			onStageResize();		}				/**		 * Center the progress bar		 */		protected function onStageResize(event:Event=null):void {			//trace('onStageResize ', stage.stageWidth , stage.stageHeight ); 			if(stage == null) return;			progressbar_mc.x = Math.round((stage.stageWidth - progressbar_mc.width) / 2);			progressbar_mc.y = Math.round((stage.stageHeight - progressbar_mc.height) / 2);		}		/**		 * On loader progress, update progress bar		 */		protected function handleLoaderProgress(event:ProgressEvent=null) : void {			var pct:Number = event.bytesLoaded / event.bytesTotal;						progressbar_mc.setText('Loading '+swf+'... '+ Math.round( pct * 100 ) + '%' );        	progressbar_mc.setPercent( pct );        }		/**		 * When swf is finished, add the main content to the stage		 */        protected function handleSwfInit( e:Event ) : void {        	        	// make sure progress bar is at 100%        	progressbar_mc.setPercent( 1 );        	        	        	if(waitForStartup) {        		        		        		// show default initialization message        		// (use PreloadEvent.MESSAGE events to change this text from main.swf)        		progressbar_mc.setText('Initializing... ');    			    			    			// add main content to stage to trigger initialization         		// (main app should not add children yet)        		addChild( loader.content );        		        	} else {        		continueToMainSwf();        	}        			}				/**		 * If we get a preload message event from the main swf, display the text		 */		protected function handlePreloadMessage(event:PreloadEvent):void {			progressbar_mc.setText( event.messageText );			progressbar_mc.setPercent( 1 );		}				/**		 * When main swf is done initializing (loading configs, etc), 		 */		protected function handleStartupComplete(event:PreloadEvent):void {			continueToMainSwf();		}				/**		 * Progressbar display was delayed, so it may not be visible.		 * If progress bar was displayed, then wait a fraction of a second 		 * before starting.  This is purely for cosmetic reasons so we don't 		 * see a flicker of a loading bar.		 */		protected function continueToMainSwf():void {        	if(progressbar_mc.visible) {	        	var timer:Timer = new Timer( 250, 1 );	        	timer.addEventListener( TimerEvent.TIMER_COMPLETE, doHidePreloaderAndContinue );	        	timer.start();        	} else {        		doHidePreloaderAndContinue();        	}		}	        /**         * Finally, let's actually continue on to the main app.         * If you want a fade out or some transition, this is the method to override         */        protected function doHidePreloaderAndContinue( e:Event=null) : void {        	// kill the progress bar        	progressbar_mc.reset();        	progressbar_mc.hide();        	removeChild( progressbar_mc );        	if(!contains(loader.content)) addChild( loader.content );        	stage.removeEventListener(Event.RESIZE, onStageResize);        }        		/**		 * parse boolean flashvar		 */		protected function getBoolean(param:String) : Boolean {			return loaderInfo.parameters[param]=='true' || loaderInfo.parameters[param]=='1'; 		}    }}